plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'groovy'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

bootJar {
	archiveFileName = 'app.jar'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// spock
	testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-4.0'
	testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-4.0'

	// 런타임에 클래스 기반 spock mock을 만들기 위해서 필요
	testImplementation('net.bytebuddy:byte-buddy:1.14.12')

	// https://mvnrepository.com/artifact/org.testcontainers/mariadb
	testImplementation 'org.testcontainers:mariadb:1.19.6'

	// spring retry
	implementation 'org.springframework.retry:spring-retry'
	// mockWebServer
	testImplementation('com.squareup.okhttp3:okhttp:4.12.0')
	testImplementation('com.squareup.okhttp3:mockwebserver:4.12.0')

	// handlebars
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mustache
	implementation 'org.springframework.boot:spring-boot-starter-mustache:3.2.3'

	// https://mvnrepository.com/artifact/com.github.sps.mustache/mustache-spring-view
	implementation 'com.github.sps.mustache:mustache-spring-view:1.4'

	// https://github.com/seruco/base62
	implementation 'io.seruco.encoding:base62:0.1.3'


}

tasks.named('test') {
	useJUnitPlatform()
}


// $ ./gradlew clean build -PKAKAO_REST_API_KEY={api key 값} 명령어로 전체 테스트 및 빌드하여 jar 파일 생성
processTestResources {
	boolean hasProperty = project.hasProperty("KAKAO_REST_API_KEY")
	System.out.println("Set kakao rest api key: $hasProperty")
	filesMatching('**/application.yml') {
		expand(project.properties)
	}
}

apply plugin : 'java'
test {
	testLogging.showStandardStreams = true
}